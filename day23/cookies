const express = require('express'); // Importing the Express.js framework
const bcrypt = require('bcrypt'); // Importing bcrypt for password hashing
const session = require('express-session'); // Importing express-session for session management
const cookieParser = require('cookie-parser'); // Importing cookie-parser for parsing cookies
const { body, validationResult } = require('express-validator'); // Importing express-validator for input validation

const app = express(); // Creating an instance of Express application
app.use(express.json()); // Middleware to parse JSON requests
app.use(cookieParser()); // Middleware to parse cookies
app.use(session({ secret: 'your-secret-key', resave: true, saveUninitialized: true })); // Middleware for session management

// Server Variable Structure for storing user credentials
const users = [];

// Middleware for data sanitization and validation during registration
const sanitizeRegistrationInputs = [
  body('username').trim().escape(), // Sanitize username input
  body('password').trim(), // Trim password input
  body('password').isLength({ min: 6 }).withMessage('Password must be at least 6 characters long'), // Validate password length
];

// Registration endpoint to create a new user
app.post('/register', sanitizeRegistrationInputs, async (req, res) => {
  const errors = validationResult(req); // Get validation errors
  if (!errors.isEmpty()) {
    return res.status(400).json({ errors: errors.array() }); // Return validation errors if any
  }

  const { username, password } = req.body; // Extract username and password from request body
  try {
    const hashedPassword = await bcrypt.hash(password, 10); // Hash the password
    users.push({ username, password: hashedPassword }); // Store the username and hashed password in the server variable
    res.status(201).json({ message: 'User registered successfully' }); // Send success message
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'Internal server error' }); // Send internal server error message
  }
});

// Middleware for data sanitization and validation during login
const sanitizeLoginInputs = [
  body('username').trim().escape(), // Sanitize username input
  body('password').trim(), // Trim password input
];

// Login endpoint to authenticate users
app.post('/login', sanitizeLoginInputs, async (req, res) => {
  const errors = validationResult(req); // Get validation errors
  if (!errors.isEmpty()) {
    return res.status(400).json({ errors: errors.array() }); // Return validation errors if any
  }

  const { username, password } = req.body; // Extract username and password from request body
  const user = users.find(u => u.username === username); // Find the user by username
  if (user) {
    try {
      if (await bcrypt.compare(password, user.password)) { // Compare entered password with hashed password
        req.session.userId = username; // Store the username in the session
        res.cookie('sessionId', req.session.id, { httpOnly: true }); // Set session cookie in the user's browser
        res.status(200).json({ message: 'Authentication successful' }); // Send success message
      } else {
        res.status(401).json({ message: 'Authentication failed' }); // Send authentication failed message
      }
    } catch (error) {
      console.error(error);
      res.status(500).json({ message: 'Internal server error' }); // Send internal server error message
    }
  } else {
    res.status(401).json({ message: 'User not found' }); // Send user not found message
  }
});

// Protected route that can only be accessed by authenticated users
app.get('/protected', (req, res) => {
  if (req.session.userId) {
    res.status(200).json({ message: 'Access granted' }); // Send access granted message
  } else {
    res.status(403).json({ message: 'Access denied' }); // Send access denied message
  }
});

// Logout functionality to destroy the user's session and clear the session cookie
app.post('/logout', (req, res) => {
  req.session.destroy(); // Destroy the session
  res.clearCookie('sessionId'); // Clear the session cookie
  res.status(200).json({ message: 'Logout successful' }); // Send success message
});

// Error handling middleware
app.use((err, req, res, next) => {
  console.error(err.stack); // Log error to console
  res.status(500).json({ message: 'Internal server error' }); // Send internal server error message
});

// Start the server
const PORT = process.env.PORT || 3000; // Define port
app.listen(PORT, () => console.log(`Server running on port ${PORT}`)); // Start server and log port
