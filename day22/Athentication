const express = require('express');
const { body, validationResult } = require('express-validator'); // Importing express-validator for input validation
const jwt = require('jsonwebtoken'); // Importing jsonwebtoken for JWT functionality

const app = express(); // Creating an Express application
app.use(express.json()); // Middleware to parse JSON requests

const users = [
  { username: 'alice', password: 'secret_password', role: 'user' }, // Adding role to user data
  { username: 'bob', password: 'password123', role: 'admin' }, // Adding role to user data
];

// Middleware for data sanitization and validation
const sanitizeLoginInputs = [
  body('username').trim().escape(), // Sanitize username input
  body('password').trim().escape(), // Sanitize password input
];

// Login route with data sanitization and validation middleware
app.post('/login', sanitizeLoginInputs, (req, res) => {
  const errors = validationResult(req); // Get validation errors
if (!errors.isEmpty()) {
    return res.status(400).json({ errors: errors.array() }); // Return validation errors if any
}

  const { username, password } = req.body; // Extract username and password from request body
  const user = users.find(u => u.username === username && u.password === password); // Check if user exists
if (user) {
    // Successful authentication
    const token = jwt.sign({ username: user.username, role: user.role }, 'secret_key', { expiresIn: '2h' }); // Generate JWT token
    res.status(200).json({ message: 'Authentication successful', token }); // Send success message with token
} else {
    // Authentication failed
    res.status(401).json({ message: 'Authentication failed' }); // Send authentication failed message
}
});

// Middleware to ensure JWT token is provided
function ensureToken(req, res, next) {
  const bearerHeader = req.headers['authorization']; // Get authorization header
if (typeof bearerHeader !== 'undefined') {
    const bearerToken = bearerHeader.split(' ')[1]; // Extract token from header
    req.token = bearerToken; // Set token in request object
    next(); // Call next middleware
} else {
    res.sendStatus(403); // Send forbidden status if token is not provided
}
}

// Protected route with JWT token verification
app.get('/protected', ensureToken, (req, res) => {
  jwt.verify(req.token, 'secret_key', (err, decoded) => { // Verify JWT token
    if (err) {
      res.sendStatus(403); // Send forbidden status if token verification fails
    } else {
      res.json({ message: 'Access granted', user: decoded }); // Send access granted message with decoded token payload
    }
});
});

// Error handling middleware
app.use((err, req, res, next) => {
  console.error(err.stack); // Log error to console
  res.status(500).json({ message: 'Internal server error' }); // Send internal server error message
});

// Start the server
const PORT = process.env.PORT || 3000; // Define port
app.listen(PORT, () => console.log(`Server running on port ${PORT}`)); // Start server and log port
